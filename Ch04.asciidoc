== Keys and Addresses

== Introduction to cryptography on Chia
Private -> Public Key pairing concepts-::
test

== Basics of BLS signatures

== Puzzles, Puzzle Hashes and XCH addresses
Puzzles::

Puzzle Hashes::
A puzzle hash is simply a puzzle that is run as a solution through sha256tree as the puzzle. This sounds complicated, but it is not really. In many ways it is the major magic trick that chia blockchain and chialisp programming language offers to the world over anything else previous. It is worth spending the time to get an understanding of what that word jumble actually means and how great the implications are at the end. The examples below are highly recommended to follow along with on your chia node if you have one available. It is really important. 

You can easily get the puzzle hash for any puzzle by using the command `cdv clsp <something something>` with the output of <puzzlehash> being your new puzzlehash. It is recommended that you drop to a command line and try this. But this shortcut does not give the in-depth understanding we seek in this guide.

Therefore, you should verify the output of the previous simple command manually using chialisp and clvm only. For example, to do that, if again the puzzle is `<puzzle>` you can run it as solution through sha256tree as the puzzle. You are not reading that wrong. We are converting the initial puzzle into a solution by placing it in an extra set of parentheses and putting it at the end of the brun command. It looks like this `brun '(a (q 2 6 (c 2 (c 5 ()))) (c (q 1 2 (i (l 5) (q 11 (q . 2) (a 6 (c 2 (c 9 ()))) (a 6 (c 2 (c 13 ())))) (q 11 (q . 1) 5)) 1) 1))'  '(<puzzle>)'` and it will output the <puzzlehash>. Notice how this output matches that of the previously run simple cdv command. Amazing right, but how did that happen?

The brun command can be run again, but this time with the verbose flag `-v` to see step by step how sha256tree hashes the leaves of the original puzzle working it's way up binary tree towards the root until hashing the last two branches and outputting a final puzzle hash that uniquely represents the whole of the original puzzle in a standard compressed 32-byte, 64 hexidecimal character format prefixed by "0x". The resulting puzzle hash, in a nutshell revealling nothing of complexity, represents the magic of chialisp. 

Every puzzlehash you see in the coin set model, and many you can't see due to not being revealled yet, represents potentially infinite logic underneath; just waiting to be optionally revealled, verified and run outputting various, and many times highly complex, directives to the chia blockchain. The accumulated possible outputs of all of the puzzle hashes contained inside all of the unspent coins of the chia coin set model defines the state of the chia blockchain at any given time. 

Hopefully, now you can visualize how simple, efficient and secure maintaining the chia blockchain state is compared to other blockchain projects regardless of how powerful and large the action potential of chia coin set model grows over time. That is the great and magnificent upside, but the downside is the sophistication now required of the wallet, which we will get into later chapters, in order to spend those coins.

XCH addresses::
To convert a puzzle hash to an XCH address, which is just a string representation of the same thing, it is a beautifully simple command `cdv encode puzzle_hash`.

== Advanced Concepts
Custody solution using Chia::

"Sniffed Keys" - someone else knows your private key, but you don't know it.

"Stolen? Keys" - someone else knows your private key and you no longer know it.
